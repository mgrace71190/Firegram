{"ast":null,"code":"// this useEffect HOOK will be used to handle file uploads and return useful info about that upload, progress etc\nimport { useState, useEffect } from 'react';\nimport { projectStorage } from '../firebase/config';\n\nconst useStorage = file => {\n  // progress of teh upload\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null); // image url we get back from storage after the full upload\n\n  const [url, setUrl] = useState(null); // the funciton inside useEffect will fire everytime the file dependancy changes i.e a new file\n\n  useEffect(() => {\n    // create reference\n    console.log(projectStorage);\n    const storageRef = ref(projectStorage, file.name);\n    console.log(storageRef);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    uploadTask.on('state_changed', snapshot => {\n      let percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, () => {\n      getDownloadURL(uploadTask.snapshot.ref).then(url => setUrl(url));\n    });\n  }, [file]); // returning all these values here\n\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["C:/Users/markg/Desktop/Software development courses/React Projects/FireGram/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","useStorage","file","progress","setProgress","error","setError","url","setUrl","console","log","storageRef","ref","name","uploadTask","uploadBytesResumable","on","snapshot","percentage","bytesTransferred","totalBytes","err","getDownloadURL","then"],"mappings":"AAAA;AACA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,oBAA/B;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AACzB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC,CAHyB,CAIzB;;AACA,QAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,IAAD,CAA9B,CALyB,CAMzB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYV,cAAZ;AACA,UAAMW,UAAU,GAAGC,GAAG,CAACZ,cAAD,EAAiBE,IAAI,CAACW,IAAtB,CAAtB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AAEA,UAAMG,UAAU,GAAGC,oBAAoB,CAACJ,UAAD,EAAaT,IAAb,CAAvC;AAEAY,IAAAA,UAAU,CAACE,EAAX,CACI,eADJ,EAEKC,QAAD,IAAc;AACV,UAAIC,UAAU,GACTD,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GADxD;AAEAhB,MAAAA,WAAW,CAACc,UAAD,CAAX;AACH,KANL,EAOKG,GAAD,IAAS;AACLf,MAAAA,QAAQ,CAACe,GAAD,CAAR;AACH,KATL,EAUI,MAAM;AACFC,MAAAA,cAAc,CAACR,UAAU,CAACG,QAAX,CAAoBL,GAArB,CAAd,CAAwCW,IAAxC,CAA8ChB,GAAD,IACzCC,MAAM,CAACD,GAAD,CADV;AAGH,KAdL;AAgBH,GAxBQ,EAwBN,CAACL,IAAD,CAxBM,CAAT,CAPyB,CAgCzB;;AACA,SAAO;AAAEC,IAAAA,QAAF;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAP;AACH,CAlCD;;AAoCA,eAAeJ,UAAf","sourcesContent":["// this useEffect HOOK will be used to handle file uploads and return useful info about that upload, progress etc\r\nimport {useState, useEffect} from 'react';\r\nimport { projectStorage } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n    // progress of teh upload\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    // image url we get back from storage after the full upload\r\n    const [url, setUrl] = useState(null);\r\n    // the funciton inside useEffect will fire everytime the file dependancy changes i.e a new file\r\n    useEffect(() => {\r\n        // create reference\r\n        console.log(projectStorage);\r\n        const storageRef = ref(projectStorage, file.name);\r\n        console.log(storageRef);\r\n\r\n        const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n        uploadTask.on(\r\n            'state_changed',\r\n            (snapshot) => {\r\n                let percentage =\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                setProgress(percentage);\r\n            },\r\n            (err) => {\r\n                setError(err);\r\n            },\r\n            () => {\r\n                getDownloadURL(uploadTask.snapshot.ref).then((url) =>\r\n                    setUrl(url)\r\n                );\r\n            }\r\n        );\r\n    }, [file]);\r\n    // returning all these values here\r\n    return { progress, url, error }\r\n}\r\n\r\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}