{"ast":null,"code":"// this useEffect HOOK will be used to handle file uploads and return useful info about that upload, progress etc\nimport { useState, useEffect } from 'react';\nimport { projectStorage } from '../Firebase/config';\n\nconst useStorage = file => {\n  // progress of teh upload\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null); // image url we get back from storage after the full upload\n\n  const [url, setUrl] = useState(null); // the funciton inside useEffect will fire everytime the file dependancy changes i.e a new file\n\n  useEffect(() => {\n    // referecnes\n    // first need a reference as to where teh file should be saved\n    // storageRef goes about uploading the file to this ref (ref(file.name))\n    const storageRef = projectStorage.ref(file.name); // fire a function when progres changes or completes\n    // the snap gives us a snapshot in time of an upload, i.e the progress of a progress bar\n\n    storageRef.put(file).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100; // set progress (%)\n\n      setProgress(percentage);\n    }, err => {\n      // set the error here, if there is one\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL(); // set url here, if the image is uploaded\n\n      setUrl(url);\n    });\n  }, [file]); // returning all these values here\n\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["C:/Users/markg/Desktop/Software development courses/React Projects/FireGram/src/HOOKS/useStorage.js"],"names":["useState","useEffect","projectStorage","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL"],"mappings":"AAAA;AACA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,oBAA/B;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AACzB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC,CAHyB,CAIzB;;AACA,QAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,IAAD,CAA9B,CALyB,CAMzB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA,UAAMU,UAAU,GAAGT,cAAc,CAACU,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB,CAJY,CAKZ;AACA;;AACAF,IAAAA,UAAU,CAACG,GAAX,CAAeV,IAAf,EAAqBW,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAU;AAC/C,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D,CAD+C,CAE/C;;AACAb,MAAAA,WAAW,CAACW,UAAD,CAAX;AACH,KAJD,EAIIG,GAAD,IAAS;AACR;AACAZ,MAAAA,QAAQ,CAACY,GAAD,CAAR;AACH,KAPD,EAOG,YAAY;AACX,YAAMX,GAAG,GAAG,MAAME,UAAU,CAACU,cAAX,EAAlB,CADW,CAEX;;AACAX,MAAAA,MAAM,CAACD,GAAD,CAAN;AACH,KAXD;AAYH,GAnBQ,EAmBN,CAACL,IAAD,CAnBM,CAAT,CAPyB,CA2BzB;;AACA,SAAO;AAAEC,IAAAA,QAAF;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAP;AACH,CA7BD;;AA+BA,eAAeJ,UAAf","sourcesContent":["// this useEffect HOOK will be used to handle file uploads and return useful info about that upload, progress etc\r\nimport {useState, useEffect} from 'react';\r\nimport { projectStorage } from '../Firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n    // progress of teh upload\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    // image url we get back from storage after the full upload\r\n    const [url, setUrl] = useState(null);\r\n    // the funciton inside useEffect will fire everytime the file dependancy changes i.e a new file\r\n    useEffect(() => {\r\n        // referecnes\r\n        // first need a reference as to where teh file should be saved\r\n        // storageRef goes about uploading the file to this ref (ref(file.name))\r\n        const storageRef = projectStorage.ref(file.name)\r\n        // fire a function when progres changes or completes\r\n        // the snap gives us a snapshot in time of an upload, i.e the progress of a progress bar\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            // set progress (%)\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            // set the error here, if there is one\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            // set url here, if the image is uploaded\r\n            setUrl(url);\r\n        })\r\n    }, [file]);\r\n    // returning all these values here\r\n    return { progress, url, error }\r\n}\r\n\r\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}